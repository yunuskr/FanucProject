@model FanucRelease.ViewModels.ProgramHatalarVM

@{
    ViewData["Title"] = "Hata Detayları";
}

<style>
/* === SAYFAYA ÖZEL ALTIN ARKAPLAN === */
:root{
  --gold:#face00;
  --amber:#f09701;
  --dark:#15120a;
  --error-red: #dc3545;
  --warning-orange: #fd1414;
  --info-blue: #f00d0d;
  --success-green: #198754;
}

body{
  background-color:var(--dark) !important;
  background-image:
    radial-gradient(1200px 800px at 38% 35%,
      rgba(250,206,0,.95) 0%,
      rgba(240,151,1,.65) 34%,
      rgba(240,151,1,.25) 50%,
      rgba(21,18,10,0) 68%),
    radial-gradient(900px 600px at 88% 8%,
      rgba(240,151,1,.35) 0%,
      rgba(21,18,10,0) 60%),
    radial-gradient(1000px 700px at 0% 100%,
      rgba(0,0,0,.55) 10%,
      rgba(0,0,0,0) 60%),
    linear-gradient(180deg,#1c150a 0%, var(--dark) 100%);
  background-attachment:fixed;
  background-size:cover;
}

body::after{
  content:""; position:fixed; inset:0; pointer-events:none;
  background: radial-gradient(150% 130% at 50% 50%,
    rgba(0,0,0,0) 60%, rgba(0,0,0,.45) 100%);
  mix-blend-mode:multiply;
}

.content-area{ background: transparent !important; }

/* === HATA SAYFALARI İÇİN ÖZELLEŞTİRİLMİŞ STILLER === */
.errors-header {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.9));
    backdrop-filter: blur(25px);
    border: 2px solid rgba(148, 163, 184, 0.4);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2rem;
    position: relative;
    overflow: hidden;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.7);
}

.errors-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--error-red), var(--warning-orange), var(--amber));
}

.error-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.9), rgba(30, 41, 59, 0.85));
    backdrop-filter: blur(20px);
    border: 2px solid rgba(100, 116, 139, 0.5);
    border-radius: 15px;
    padding: 1.5rem;
    text-align: center;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.6);
}

.stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.8);
    border-color: rgba(148, 163, 184, 0.7);
    background: linear-gradient(135deg, rgba(20, 30, 50, 0.95), rgba(40, 55, 75, 0.9));
}

.stat-icon {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    display: block;
}

.stat-number {
    font-size: 2rem;
    font-weight: bold;
    margin: 0;
    text-shadow: 0 2px 6px rgba(0, 0, 0, 0.6);
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
    margin: 0;
    font-weight: 600;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
}

.errors-container {
    display: grid;
    gap: 1rem;
}

.error-card {
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.9));
    backdrop-filter: blur(25px);
    border: 2px solid rgba(148, 163, 184, 0.4);
    border-radius: 15px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.7);
}

.error-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 15px 50px rgba(0, 0, 0, 0.8);
    border-color: rgba(148, 163, 184, 0.7);
    background: linear-gradient(135deg, rgba(40, 55, 75, 0.98), rgba(60, 75, 95, 0.95));
}

.error-card.error-type-critical {
    border-left: 6px solid #ef4444;
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.9));
    box-shadow: 0 12px 40px rgba(239, 68, 68, 0.2);
}

.error-card.error-type-warning {
    border-left: 6px solid #3b82f6;
    background: linear-gradient(135deg, rgba(30, 41, 59, 0.95), rgba(51, 65, 85, 0.9));
    box-shadow: 0 12px 40px rgba(59, 130, 246, 0.2);
}



.error-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1rem;
}

.error-type-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.error-type-badge.critical {
    background: linear-gradient(135deg, #dc2626, #b91c1c);
    color: #ffffff;
    border: 2px solid #fca5a5;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
}

.error-type-badge.warning {
    background: linear-gradient(135deg, #d97706, #b45309);
    color: #ffffff;
    border: 2px solid #fcd34d;
    font-weight: 700;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
}



.error-index {
    background: linear-gradient(135deg, #1e40af, #1e3a8a);
    color: #ffffff;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    font-size: 1rem;
    border: 2px solid #93c5fd;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8);
    box-shadow: 0 4px 15px rgba(30, 64, 175, 0.4);
}

.error-description {
    color: #ffffff;
    font-size: 1.1rem;
    font-weight: 600;
    line-height: 1.6;
    margin-bottom: 1rem;
    text-shadow: 0 2px 6px rgba(0, 0, 0, 0.7);
}

.error-timestamp {
    display: flex;
    align-items: center;
    color: rgba(255, 255, 255, 0.95);
    font-size: 0.95rem;
    font-weight: 600;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
}

.error-timestamp i {
    margin-right: 0.5rem;
    color: var(--amber);
}

.no-errors-card {
    background: linear-gradient(135deg, rgba(5, 46, 22, 0.9), rgba(22, 101, 52, 0.85));
    backdrop-filter: blur(30px);
    border: 3px solid #4ade80;
    border-radius: 20px;
    padding: 3rem;
    text-align: center;
    color: #ffffff;
    box-shadow: 0 15px 50px rgba(34, 197, 94, 0.3);
}

.no-errors-icon {
    font-size: 4rem;
    color: var(--success-green);
    margin-bottom: 1rem;
}

.back-btn {
    background: linear-gradient(135deg, var(--amber), var(--gold));
    border: none;
    color: #000;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 10px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.back-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(240, 151, 1, 0.4);
    color: #000;
    text-decoration: none;
}

/* Animasyonlar */
.error-card {
    animation: slideInUp 0.6s ease forwards;
    opacity: 0;
    transform: translateY(20px);
}

.error-card:nth-child(1) { animation-delay: 0.1s; }
.error-card:nth-child(2) { animation-delay: 0.2s; }
.error-card:nth-child(3) { animation-delay: 0.3s; }
.error-card:nth-child(4) { animation-delay: 0.4s; }
.error-card:nth-child(5) { animation-delay: 0.5s; }

@@keyframes slideInUp {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive */
@@media (max-width: 768px) {
    .errors-header {
        padding: 1.5rem;
    }
    
    .error-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .stat-card {
        padding: 1rem;
    }
}
</style>
<div class="container-fluid">

    <!-- Header Section -->
    <div class="errors-header">
        <div class="d-flex align-items-center justify-content-between mb-3">
            <div>
                <h2 class="mb-2 text-white d-flex align-items-center" style="text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5); font-weight: 600;">
                    <i class="fas fa-exclamation-triangle text-danger me-3" style="font-size: 2rem; filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.5));"></i>
                    Hata Detayları
                </h2>
                <div class="text-white fs-5" style="text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4);">
                    <i class="fas fa-cog me-2 text-warning"></i>
                    Program: <strong class="text-white">@Model.ProgramAdi</strong>
                    @if (!string.IsNullOrWhiteSpace(Model.OperatorAdSoyad))
                    {
                        <span class="ms-3">
                            <i class="fas fa-user me-2 text-info"></i>
                            Operatör: <strong class="text-white">@Model.OperatorAdSoyad</strong>
                        </span>
                    }
                </div>
            </div>

            <a asp-controller="ProgramDetay" asp-action="Index" asp-route-id="@Model.ProgramId" class="back-btn">
                <i class="fas fa-arrow-left"></i>
                Programa Dön
            </a>
        </div>

        <!-- İstatistikler -->
        <div class="error-stats">
            @{
                var totalErrors = Model.Hatalar?.Count ?? 0;
                var criticalErrors = Model.Hatalar?.Count(h => h.Tip == "1") ?? 0;
                var warningErrors = Model.Hatalar?.Count(h => h.Tip == "2") ?? 0;
            }
            
            <div class="stat-card">
                <i class="fas fa-exclamation-triangle stat-icon" style="color: var(--error-red);"></i>
                <h3 class="stat-number text-white">@totalErrors</h3>
                <p class="stat-label text-white-50">Toplam Hata</p>
            </div>
            
            <div class="stat-card">
                <i class="fas fa-times-circle stat-icon" style="color: #ff6b7a;"></i>
                <h3 class="stat-number text-white">@criticalErrors</h3>
                <p class="stat-label text-white-50">Kritik Hata</p>
            </div>
            
            <div class="stat-card">
                <i class="fas fa-exclamation-circle stat-icon" style="color: #3b82f6;"></i>
                <h3 class="stat-number text-white">@warningErrors</h3>
                <p class="stat-label text-white-50">Uyarı</p>
            </div>
        </div>
    </div>

    <!-- Hata Listesi -->
    @if (Model.Hatalar == null || !Model.Hatalar.Any())
    {
        <div class="no-errors-card">
            <i class="fas fa-check-circle no-errors-icon"></i>
            <h3 class="mb-3">Harika! Hiç Hata Yok</h3>
            <p class="mb-0">Bu programa ait herhangi bir hata kaydı bulunamadı. Sistem sorunsuz çalışıyor.</p>
        </div>
    }
    else
    {
        <div class="errors-container">
            @{
                var errorIndex = 1;
                foreach (var hata in Model.Hatalar)
                {
                    var errorType = "warning"; // Default uyarı
                    var errorIcon = "fas fa-exclamation-triangle";
                    
                    // Eğer Tip == "1" ise critical, yoksa warning
                    if (hata.Tip == "1")
                    {
                        errorType = "critical";
                        errorIcon = "fas fa-times-circle";
                    }
                    
                    <div class="error-card error-type-@errorType">
                        <div class="error-header">
                            <div class="d-flex align-items-center gap-3">
                                <div class="error-index">@errorIndex</div>
                                <div>
                                    <div class="d-flex align-items-center gap-2 mb-1">
                                        <i class="@errorIcon" style="color: @(errorType == "critical" ? "#ff6b7a" : "#3b82f6");"></i>
                                        <span class="error-type-badge @errorType">@(hata.Tip == "1" ? "Kritik" : "Uyarı")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="error-description">
                            @hata.Aciklama
                        </div>
                        
                        <div class="error-timestamp">
                            <i class="fas fa-clock"></i>
                            @hata.Zaman.ToString("dd MMMM yyyy, HH:mm:ss")
                        </div>
                    </div>
                    
                    errorIndex++;
                }
            }
        </div>
    }

</div>
