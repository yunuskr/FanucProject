@{
    ViewData["Title"] = "Robot Canlı İzleme";
    Layout = "_Layout";                 // ana şablonun
    var kaynakId = (int?)ViewBag.KaynakId;
}

@section Head {
    <link rel="stylesheet" href="~/css/canli-izleme.css" />
}

<div class="container-fluid py-4 page-container">
    <!-- Premium Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card glass-card" style="background: linear-gradient(135deg, rgba(250, 206, 0, 0.95) 0%, rgba(240, 151, 1, 0.9) 50%, rgba(218, 165, 32, 0.95) 100%); border: 1px solid rgba(240,151,1,0.3); box-shadow: 0 8px 32px rgba(240, 151, 1, 0.15);">
                <div class="card-body d-flex align-items-center justify-content-between py-4 px-4">
                    <div class="d-flex align-items-center">
                        <div class="me-4" style="width: 60px; height: 60px; background: var(--gradient-gold); border-radius: var(--radius-xl); display: flex; align-items: center; justify-content: center; box-shadow: var(--shadow-gold);">
                            <i class="fas fa-robot" style="font-size: 1.75rem; color: #1F2937;"></i>
                        </div>
                        <div>
                            <h3 class="mb-2" style="font-size: var(--font-size-3xl); font-weight: 800; color: #111827; text-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                Robot Canlı İzleme
                            </h3>
                            <p class="mb-0" style="color: #6B7280; font-size: var(--font-size-lg); font-weight: 500;">
                                <i class="fas fa-satellite-dish me-2" style="color: var(--gold-secondary);"></i>
                                Gerçek zamanlı kaynak verileri ve performans analizi
                            </p>
                        </div>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        @if (kaynakId.HasValue)
                        {
                            <div class="badge-premium d-flex align-items-center gap-2">
                                <i class="fas fa-layer-group"></i>
                                <span style="font-weight: 700;">Kaynak ID: @kaynakId.Value</span>
                            </div>
                        }
                        <div id="program-pill" class="d-flex align-items-center gap-3 px-3 py-2" style="background: rgba(250,252,251,0.9); border-radius: var(--radius-lg); border: 1px solid rgb(210,216,214); min-width:260px;">
                            <div id="program-status-dot" class="status-indicator inactive"></div>
                            <div class="d-flex flex-column" style="line-height:1.1;">
                                <span id="program-name" style="font-weight:600; font-size: var(--font-size-sm); color:#374151;">Program Yok</span>
                            </div>
                            <span id="program-state-label" class="ms-auto badge-premium" style="background: rgba(107,114,128,0.15); color:#6B7280; font-weight:600;">BEKLEME</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Premium Metric Cards -->
    <div class="row g-4 mb-5">
        <div class="col-lg-4">
            <div class="card metric-card h-100" style="animation: fadeInUp 0.6s ease-out 0.1s both;">
                <div class="card-body">
                    <div class="metric-icon" id="robot-icon-container" style="background: linear-gradient(135deg, rgba(16,185,129,0.15) 0%, rgba(16,185,129,0.05) 100%); color: #10B981; transition: all 0.3s ease;">
                        <i class="fas fa-robot" style="font-size: 1.75rem;"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="metric-title">Robot Durumu</div>
                        <div class="metric-value" id="txt-status" style="color: #10B981; font-size: var(--font-size-lg); font-weight: 400;">Sistem Hazır</div>
                        <div class="metric-subtitle mt-3">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center">
                                    <span id="status-icon" class="status-indicator active me-2" style="width: 10px; height: 10px;"></span>
                                    <span style="color: #9CA3AF; font-size: 0.8rem; font-weight: 500;">Canlı Bağlantı</span>
                                </div>
                                <div style="color: #6B7280; font-size: 0.75rem;">
                                    <span id="last-upd" style="color: #374151; font-weight: 600;">-</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="ms-auto">
                        <div class="badge-premium" id="status-badge" style="background: rgba(16,185,129,0.1); color: #10B981;">
                            <i class="fas fa-wifi me-1"></i>Canlı
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card metric-card h-100" style="animation: fadeInUp 0.6s ease-out 0.2s both;">
                <div class="card-body">
                    <div class="metric-icon" style="background: linear-gradient(135deg, rgba(240,151,1,0.15) 0%, rgba(250,206,0,0.05) 100%); color: var(--gold-secondary);">
                        <i class="fas fa-tachometer-alt"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="metric-title">Robot Hızı</div>
                        <div class="metric-value">
                            <span id="val-speed" style="color: var(--gold-secondary);">0</span>
                            <small style="color: #6B7280; font-size: var(--font-size-sm); font-weight: 500;">mm/s</small>
                        </div>
                        <div class="metric-subtitle">Anlık hareket hızı</div>
                    </div>
                    <div class="ms-auto">
                        <div class="badge-premium">
                            <i class="fas fa-bolt me-1"></i>Anlık
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div id="system-status-card" class="card metric-card h-100" data-status="normal" style="animation: fadeInUp 0.6s ease-out 0.3s both;">
                <div class="card-body">
                    <div id="system-status-icon" class="metric-icon" style="background: linear-gradient(135deg, rgba(16,185,129,0.15) 0%, rgba(16,185,129,0.05) 100%); color: #10B981; transition: all .3s;">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="metric-title">Sistem Durumu</div>
                        <div class="metric-value">
                            <span id="val-alarm" style="color: #10B981; font-weight:700;">Normal</span>
                        </div>
                        <div class="metric-subtitle">
                            <span id="val-alarm-msg">Alarm bulunmuyor</span>
                        </div>
                    </div>
                    <div class="ms-auto">
                        <div id="alarm-indicator" class="badge-premium" style="background: rgba(16,185,129,0.1); color: #10B981;">
                            <i class="fas fa-check-circle me-1"></i><span id="alarm-indicator-text">OK</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Premium Chart Visualization -->
    <div class="row g-4">
        <!-- Amper Chart -->
        <div class="col-lg-4">
            <div class="card chart-card h-100" style="animation: fadeInUp 0.6s ease-out 0.4s both;">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-bolt" style="color: #DC2626;"></i>
                        Amper Değerleri
                    </h5>
                    <div class="badge-premium" style="background: rgba(220,38,38,0.1); color: #DC2626;">
                        <i class="fas fa-chart-area me-1"></i>Gerçek Zamanlı
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="chartAmper"></canvas>
                </div>
                <div class="card-footer p-0" style="border-top: 1px solid rgba(0,0,0,0.08);">
                    <div class="table-responsive">
                        <table class="table table-premium mb-0">
                            <thead>
                                <tr>
                                    <th style="width: 45%;">
                                        <i class="fas fa-clock me-1" style="color: #6B7280;"></i>
                                        Zaman
                                    </th>
                                    <th>
                                        <i class="fas fa-bolt me-1" style="color: #DC2626;"></i>
                                        Amper (A)
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="tbl-amper"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Voltaj Chart -->
        <div class="col-lg-4">
            <div class="card chart-card h-100" style="animation: fadeInUp 0.6s ease-out 0.5s both;">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-plug" style="color: #059669;"></i>
                        Voltaj Değerleri
                    </h5>
                    <div class="badge-premium" style="background: rgba(5,150,105,0.1); color: #059669;">
                        <i class="fas fa-chart-area me-1"></i>Gerçek Zamanlı
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="chartVoltaj"></canvas>
                </div>
                <div class="card-footer p-0" style="border-top: 1px solid rgba(0,0,0,0.08);">
                    <div class="table-responsive">
                        <table class="table table-premium mb-0">
                            <thead>
                                <tr>
                                    <th style="width: 45%;">
                                        <i class="fas fa-clock me-1" style="color: #6B7280;"></i>
                                        Zaman
                                    </th>
                                    <th>
                                        <i class="fas fa-plug me-1" style="color: #059669;"></i>
                                        Voltaj (V)
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="tbl-voltaj"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tel Sürme Hızı Chart -->
        <div class="col-lg-4">
            <div class="card chart-card h-100" style="animation: fadeInUp 0.6s ease-out 0.6s both;">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="fas fa-wind" style="color: var(--gold-secondary);"></i>
                        Tel Sürme Hızı
                    </h5>
                    <div class="badge-premium">
                        <i class="fas fa-chart-area me-1"></i>Gerçek Zamanlı
                    </div>
                </div>
                <div class="chart-container">
                    <canvas id="chartTel"></canvas>
                </div>
                <div class="card-footer p-0" style="border-top: 1px solid rgba(0,0,0,0.08);">
                    <div class="table-responsive">
                        <table class="table table-premium mb-0">
                            <thead>
                                <tr>
                                    <th style="width: 45%;">
                                        <i class="fas fa-clock me-1" style="color: #6B7280;"></i>
                                        Zaman
                                    </th>
                                    <th>
                                        <i class="fas fa-wind me-1" style="color: var(--gold-secondary);"></i>
                                        Hız
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="tbl-tel"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SignalR JS (local) -->
    <script src="~/lib/microsoft-signalr/8.0.0/signalr.min.js" asp-append-version="true"></script>
    <!-- Chart.js (local) -->
    <script src="~/lib/chart.js/4.4.1/chart.umd.min.js" asp-append-version="true"></script>

    <script>
        // --- Shared helpers (avoid duplication) ---
        function setProgramPill(running, programText) {
            const pill = document.getElementById('program-pill');
            const progNameEl = document.getElementById('program-name');
            const progDot = document.getElementById('program-status-dot');
            const progState = document.getElementById('program-state-label');
            if (!pill || !progDot || !progState) return;
            if (running) {
                progDot.classList.remove('inactive');
                progDot.classList.add('active');
                progDot.style.background = '#10B981';
                progState.textContent = 'ÇALIŞIYOR';
                progState.style.background = 'rgba(16,185,129,0.15)';
                progState.style.color = '#059669';
                if (progNameEl) progNameEl.textContent = (programText && programText.trim() !== '') ? programText : 'Program Bilgisi';
            } else {
                progDot.classList.remove('active');
                progDot.classList.add('inactive');
                progDot.style.background = '#DC2626';
                progState.textContent = 'BEKLEME';
                progState.style.background = 'rgba(107,114,128,0.15)';
                progState.style.color = '#6B7280';
                if (progNameEl) progNameEl.textContent = 'Program Yok';
            }
        }

        function applyRobotStatusStyles(isRunning) {
            const txtStatus = document.getElementById('txt-status');
            const statusIcon = document.getElementById('status-icon');
            const robotIconContainer = document.getElementById('robot-icon-container');
            const statusBadge = document.getElementById('status-badge');
            if (txtStatus) {
                txtStatus.textContent = isRunning ? 'Robot çalışıyor' : 'Robot durdu';
                txtStatus.style.color = isRunning ? '#10B981' : '#DC2626';
            }
            if (robotIconContainer) {
                robotIconContainer.style.background = isRunning
                    ? 'linear-gradient(135deg, rgba(16,185,129,0.15) 0%, rgba(16,185,129,0.05) 100%)'
                    : 'linear-gradient(135deg, rgba(220,38,38,0.15) 0%, rgba(220,38,38,0.05) 100%)';
                robotIconContainer.style.color = isRunning ? '#10B981' : '#DC2626';
            }
            if (statusIcon) {
                statusIcon.style.background = isRunning ? '#10B981' : '#DC2626';
                statusIcon.classList.toggle('active', isRunning);
            }
            if (statusBadge) {
                statusBadge.style.background = isRunning ? 'rgba(16,185,129,0.1)' : 'rgba(220,38,38,0.1)';
                statusBadge.style.color = isRunning ? '#10B981' : '#DC2626';
            }
        }

        function resetLiveData() {
            dataPoints.labels = [];
            dataPoints.amper = [];
            dataPoints.voltaj = [];
            dataPoints.telHizi = [];
            updateCharts();
            ['tbl-amper','tbl-voltaj','tbl-tel'].forEach(id => { const el = document.getElementById(id); if (el) el.innerHTML = ''; });
        }

        function updateCharts() {
            chA.data.labels = [...dataPoints.labels];
            chA.data.datasets[0].data = [...dataPoints.amper];
            chA.update('active');

            chV.data.labels = [...dataPoints.labels];
            chV.data.datasets[0].data = [...dataPoints.voltaj];
            chV.update('active');

            chW.data.labels = [...dataPoints.labels];
            chW.data.datasets[0].data = [...dataPoints.telHizi];
            chW.update('active');
        }

        // Sayfa açıldığında robotun son durumunu API'den çek
        window.addEventListener('DOMContentLoaded', async () => {
            try {
                const res = await fetch('/api/robot/status');
                if (res.ok) {
                    const data = await res.json();
                    const running = data.status === "Calisiyor";
                    setProgramPill(running, data.aktifProgram || '');
                    applyRobotStatusStyles(running);
                }
            } catch {}
        });

        // SignalR bağlantısı
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/robotStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Her yeni program başladığında grafik ve tablo verilerini sıfırla
        connection.on("ReceiveRobotStatus", (status, prog_baslat) => {
            if (status === "Calisiyor") {
                resetLiveData();
                setProgramPill(true, prog_baslat);
                applyRobotStatusStyles(true);
            } else {
                setProgramPill(false, '');
                applyRobotStatusStyles(false);
            }
        });

        // Sistem durumu (fault/normal) güncelleyici
    connection.on("ReceiveSystemStatus", (sysStatus) => {
      const card = document.getElementById('system-status-card');
      const iconBox = document.getElementById('system-status-icon');
      const valAlarm = document.getElementById('val-alarm');
      const valAlarmMsg = document.getElementById('val-alarm-msg');
      const badge = document.getElementById('alarm-indicator');

      if (!card || !iconBox || !valAlarm || !valAlarmMsg || !badge) return;

      const isFault = (sysStatus === 'Fault');
      card.setAttribute('data-status', isFault ? 'fault' : 'normal');
      iconBox.style.background = isFault ? 'linear-gradient(135deg,#dc2626,#b91c1c)' : 'linear-gradient(135deg,#059669,#10b981)';
      iconBox.style.color = '#fff';
      valAlarm.textContent = isFault ? 'Fault' : 'Normal';
      valAlarm.className = isFault ? 'mb-0 text-danger fw-bold' : 'mb-0 text-success fw-semibold';
      valAlarmMsg.textContent = isFault ? 'Hata alındı' : 'Alarm bulunmuyor';
      badge.className = 'badge-premium d-inline-flex align-items-center gap-1';
      badge.style.background = isFault ? 'linear-gradient(135deg,#dc2626,#ef4444)' : 'var(--gradient-gold)';
      badge.style.color = isFault ? '#fff' : '#1F2937';
      badge.innerHTML = isFault
        ? '<i class="fas fa-exclamation-triangle me-1"></i><span id="alarm-indicator-text">FAULT</span>'
        : '<i class="fas fa-check-circle me-1"></i><span id="alarm-indicator-text">OK</span>';
    });

        // Canlı veri geldiğinde grafik ve tabloya ekle
        connection.on("ReceiveLiveData", (amper, voltaj, telSurmeHizi, zamanIso) => {
            // Grafiklere ve tablolara ekle
            const timeLabel = fmtTime(zamanIso);
            dataPoints.labels.push(timeLabel);
            dataPoints.amper.push(parseFloat(amper));
            dataPoints.voltaj.push(parseFloat(voltaj));
            dataPoints.telHizi.push(parseFloat(telSurmeHizi));

            if (dataPoints.labels.length > MAX_DATA_POINTS) {
                dataPoints.labels.shift();
                dataPoints.amper.shift();
                dataPoints.voltaj.shift();
                dataPoints.telHizi.shift();
            }

            updateCharts();

            updateTable('tbl-amper', amper, timeLabel, 'a');
            updateTable('tbl-voltaj', voltaj, timeLabel, 'v');
            updateTable('tbl-tel', telSurmeHizi, timeLabel, 'w');
        });

    connection.start().catch(err => console.error(err.toString()));

        // Chart helpers
        const makeChart = (canvasId, label, color = '#007bff') => {
            const ctx = document.getElementById(canvasId);
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: label,
                        data: [],
                        borderColor: color,
                        backgroundColor: color + '20',
                        fill: true,
                        tension: 0.4,
                        pointRadius: 3,
                        pointHoverRadius: 6,
                        borderWidth: 3,
                        pointBackgroundColor: color,
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 1000,
                        easing: 'easeInOutQuart'
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: { 
                            ticks: { 
                                autoSkip: true, 
                                maxTicksLimit: 8,
                                color: '#6c757d'
                            },
                            grid: { color: 'rgba(0,0,0,0.1)' },
                            title: {
                                display: true,
                                text: 'Zaman',
                                color: '#495057'
                            }
                        },
                        y: { 
                            beginAtZero: true,
                            grid: { color: 'rgba(0,0,0,0.1)' },
                            ticks: {
                                color: '#6c757d'
                            },
                            title: {
                                display: true,
                                text: label,
                                color: '#495057'
                            }
                        }
                    },
                    plugins: {
                        legend: { 
                            display: true, 
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 15
                            }
                        },
                        tooltip: { 
                            mode: 'index', 
                            intersect: false,
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: color,
                            borderWidth: 1
                        }
                    }
                }
            });
        };

        const chA = makeChart('chartAmper', 'Amper (A)', '#dc3545');    // Kırmızı
        const chV = makeChart('chartVoltaj', 'Voltaj (V)', '#28a745');  // Yeşil
        const chW = makeChart('chartTel', 'Tel Hızı', '#ffc107');       // Sarı

        // Grafik verilerini tutmak için arrays
        let dataPoints = {
            labels: [],
            amper: [],
            voltaj: [],
            telHizi: []
        };

        // Maksimum veri noktası sayısı
        const MAX_DATA_POINTS = 30;

        function fmtTime(iso) {
            const d = new Date(iso);
            return d.toLocaleTimeString('tr-TR', { hour12: false });
        }

        // Removed unused setStatus and fillTable helpers

        // Tabloları güncelleme fonksiyonu
        function updateTable(tbodyId, value, time, valueKey) {
            const tb = document.getElementById(tbodyId);
            // Yeni satır ekle
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${time}</td><td>${value}</td>`;
            // En üste ekle
            if (tb.firstChild) {
                tb.insertBefore(tr, tb.firstChild);
            } else {
                tb.appendChild(tr);
            }
            // Maksimum 12 satır tut
            while (tb.children.length > 12) {
                tb.removeChild(tb.lastChild);
            }
        }
    </script>
}
