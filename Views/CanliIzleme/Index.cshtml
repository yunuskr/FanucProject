@{
    ViewData["Title"] = "Robot Canlı İzleme";
    Layout = "_Layout";                 // ana şablonun
    var kaynakId = (int?)ViewBag.KaynakId;
}

<style>
  /* sayfaya nefes */
  .metric-card .card-body{ display:flex; align-items:center; gap:.75rem; }
  .metric-card .title{ font-weight:600; }
  .metric-card .value{ font-size:1.25rem; margin:0; }
  .metric-card .sub{ font-size:.8125rem; color:#6c757d; }

  .status-dot{
      display:inline-block; width:14px; height:14px; border-radius:999px; background:#6c757d;
      box-shadow:0 0 0 3px rgba(0,0,0,.04) inset;
  }

  .chart-card .card-header{ background:transparent; }
  .chart-card .card-body{ padding-bottom:.5rem; }
  .chart-card .chart-box{ height:220px; }
  .chart-card .card-footer{ border-top:1px solid rgba(0,0,0,.06); background:transparent; }
  .chart-card table.table-sm td, 
  .chart-card table.table-sm th{ padding:.45rem .6rem; }
</style>

<div class="container-fluid mt-3">
    <!-- Başlık -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body d-flex align-items-center justify-content-between">
                    <div>
                        <h4 class="mb-1">Robot Canlı İzleme</h4>
                        <small class="text-muted">Gerçek zamanlı kaynak verileri</small>
                    </div>
                    <div>
                        @if (kaynakId.HasValue)
                        {
                            <span class="badge bg-primary">Kaynak ID: @kaynakId.Value</span>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Durum Kartları -->
    <div class="row g-3 mb-3">
        <div class="col-md-4">
            <div class="card metric-card h-100 shadow-sm">
                <div class="card-body">
                    <span id="dot-status" class="status-dot"></span>
                    <div>
                        <div class="title">Robot Durumu</div>
                        <div id="txt-status" class="sub">Robot durdu / veri yok</div>
                    </div>
                    <div class="ms-auto text-end">
                        <div class="sub">Son güncelleme:</div>
                        <div class="sub" id="last-upd">-</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card metric-card h-100 shadow-sm">
                <div class="card-body">
                    <i class="fas fa-tachometer-alt fa-lg text-primary"></i>
                    <div>
                        <div class="title">Robot Hızı</div>
                        <p class="value"><span id="val-speed">0</span> <small class="text-muted">mm/s</small></p>
                    </div>
                    <span class="badge bg-light text-dark ms-auto">Anlık</span>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card metric-card h-100 shadow-sm">
                <div class="card-body">
                    <i class="fas fa-exclamation-triangle fa-lg text-danger"></i>
                    <div>
                        <div class="title">Alarm</div>
                        <p id="val-alarm" class="mb-0 text-muted">Yok</p>
                        <small id="val-alarm-msg" class="sub">-</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Grafik Kartları -->
    <div class="row g-3">
        <!-- Amper -->
        <div class="col-lg-4">
            <div class="card chart-card h-100 shadow-sm">
                <div class="card-header py-2">
                    <strong>Amper (A)</strong>
                </div>
                <div class="card-body">
                    <div class="chart-box">
                        <canvas id="chartAmper"></canvas>
                    </div>
                </div>
                <div class="card-footer p-0">
                    <div class="table-responsive">
                        <table class="table table-sm mb-0 align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th>Zaman</th><th>Amper</th>
                                </tr>
                            </thead>
                            <tbody id="tbl-amper"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Voltaj -->
        <div class="col-lg-4">
            <div class="card chart-card h-100 shadow-sm">
                <div class="card-header py-2">
                    <strong>Voltaj (V)</strong>
                </div>
                <div class="card-body">
                    <div class="chart-box">
                        <canvas id="chartVoltaj"></canvas>
                    </div>
                </div>
                <div class="card-footer p-0">
                    <div class="table-responsive">
                        <table class="table table-sm mb-0 align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th>Zaman</th><th>Voltaj</th>
                                </tr>
                            </thead>
                            <tbody id="tbl-voltaj"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tel Sürme Hızı -->
        <div class="col-lg-4">
            <div class="card chart-card h-100 shadow-sm">
                <div class="card-header py-2">
                    <strong>Tel Sürme Hızı</strong>
                </div>
                <div class="card-body">
                    <div class="chart-box">
                        <canvas id="chartTel"></canvas>
                    </div>
                </div>
                <div class="card-footer p-0">
                    <div class="table-responsive">
                        <table class="table table-sm mb-0 align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th>Zaman</th><th>Tel Hızı</th>
                                </tr>
                            </thead>
                            <tbody id="tbl-tel"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SignalR JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script>

        // SignalR bağlantısı
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/robotStatusHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Her yeni program başladığında grafik ve tablo verilerini sıfırla
        connection.on("ReceiveRobotStatus", (status, prog_baslat) => {
            // Robot durumu alanını güncelle
            const txtStatus = document.getElementById('txt-status');
            if (status === "Calisiyor") {
                // Yeni program başladığında grafik ve tablo verilerini sıfırla
                dataPoints.labels = [];
                dataPoints.amper = [];
                dataPoints.voltaj = [];
                dataPoints.telHizi = [];

                chA.data.labels = [];
                chA.data.datasets[0].data = [];
                chA.update('active');

                chV.data.labels = [];
                chV.data.datasets[0].data = [];
                chV.update('active');

                chW.data.labels = [];
                chW.data.datasets[0].data = [];
                chW.update('active');

                document.getElementById('tbl-amper').innerHTML = '';
                document.getElementById('tbl-voltaj').innerHTML = '';
                document.getElementById('tbl-tel').innerHTML = '';

                txtStatus.textContent = "Robot çalışıyor";
            } else {
                // Robot durduğunda sadece durum metni güncellensin, veriler korunacak
                txtStatus.textContent = "Robot durdu / veri yok";
            }
        });

        // Canlı veri geldiğinde grafik ve tabloya ekle
        connection.on("ReceiveLiveData", (amper, voltaj, telSurmeHizi, zamanIso) => {
            console.log("SignalR veri alındı:", amper, voltaj, telSurmeHizi, zamanIso);
            // Grafiklere ve tablolara ekle
            const timeLabel = fmtTime(zamanIso);
            dataPoints.labels.push(timeLabel);
            dataPoints.amper.push(parseFloat(amper));
            dataPoints.voltaj.push(parseFloat(voltaj));
            dataPoints.telHizi.push(parseFloat(telSurmeHizi));

            if (dataPoints.labels.length > MAX_DATA_POINTS) {
                dataPoints.labels.shift();
                dataPoints.amper.shift();
                dataPoints.voltaj.shift();
                dataPoints.telHizi.shift();
            }

            chA.data.labels = [...dataPoints.labels];
            chA.data.datasets[0].data = [...dataPoints.amper];
            chA.update('active');

            chV.data.labels = [...dataPoints.labels];
            chV.data.datasets[0].data = [...dataPoints.voltaj];
            chV.update('active');

            chW.data.labels = [...dataPoints.labels];
            chW.data.datasets[0].data = [...dataPoints.telHizi];
            chW.update('active');

            updateTable('tbl-amper', amper, timeLabel, 'a');
            updateTable('tbl-voltaj', voltaj, timeLabel, 'v');
            updateTable('tbl-tel', telSurmeHizi, timeLabel, 'w');
        });

        connection.start().catch(err => console.error(err.toString()));
        const kaynakId = '@(ViewBag.KaynakId ?? "")';
        const endpoint = `/CanliIzleme/api/son?count=120${kaynakId ? ('&kaynakId=' + kaynakId) : ''}`;

        // Chart helpers
        const makeChart = (canvasId, label, color = '#007bff') => {
            const ctx = document.getElementById(canvasId);
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: label,
                        data: [],
                        borderColor: color,
                        backgroundColor: color + '20',
                        fill: true,
                        tension: 0.4,
                        pointRadius: 3,
                        pointHoverRadius: 6,
                        borderWidth: 3,
                        pointBackgroundColor: color,
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 1000,
                        easing: 'easeInOutQuart'
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: { 
                            ticks: { 
                                autoSkip: true, 
                                maxTicksLimit: 8,
                                color: '#6c757d'
                            },
                            grid: { color: 'rgba(0,0,0,0.1)' },
                            title: {
                                display: true,
                                text: 'Zaman',
                                color: '#495057'
                            }
                        },
                        y: { 
                            beginAtZero: true,
                            grid: { color: 'rgba(0,0,0,0.1)' },
                            ticks: {
                                color: '#6c757d'
                            },
                            title: {
                                display: true,
                                text: label,
                                color: '#495057'
                            }
                        }
                    },
                    plugins: {
                        legend: { 
                            display: true, 
                            position: 'top',
                            labels: {
                                usePointStyle: true,
                                padding: 15
                            }
                        },
                        tooltip: { 
                            mode: 'index', 
                            intersect: false,
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: color,
                            borderWidth: 1
                        }
                    }
                }
            });
        };

        const chA = makeChart('chartAmper', 'Amper (A)', '#dc3545');    // Kırmızı
        const chV = makeChart('chartVoltaj', 'Voltaj (V)', '#28a745');  // Yeşil
        const chW = makeChart('chartTel', 'Tel Hızı', '#ffc107');       // Sarı

        // Grafik verilerini tutmak için arrays
        let dataPoints = {
            labels: [],
            amper: [],
            voltaj: [],
            telHizi: []
        };

        // Maksimum veri noktası sayısı
        const MAX_DATA_POINTS = 30;

        function fmtTime(iso) {
            const d = new Date(iso);
            return d.toLocaleTimeString('tr-TR', { hour12: false });
        }

        function setStatus(ok, speed, alarm, msg, lastTimeIso) {
            const dot = document.getElementById('dot-status');
            const txt = document.getElementById('txt-status');
            const spd = document.getElementById('val-speed');
            const alm = document.getElementById('val-alarm');
            const almMsg = document.getElementById('val-alarm-msg');
            const upd = document.getElementById('last-upd');

            dot.style.background = ok ? '#28a745' : '#dc3545';
            txt.textContent = ok ? 'Robot çalışıyor' : 'Robot durdu / veri yok';
            spd.textContent = speed ?? 0;
            alm.textContent = alarm ? 'VAR' : 'Yok';
            alm.className = alarm ? 'mb-0 text-danger' : 'mb-0 text-muted';
            almMsg.textContent = alarm ? (msg || '') : '-';
            upd.textContent = lastTimeIso ? fmtTime(lastTimeIso) : '-';
        }

        function fillTable(tbodyId, rows, valueKey) {
            const tb = document.getElementById(tbodyId);
            tb.innerHTML = '';
            // son 12 satır
            rows.slice(-12).reverse().forEach(r => {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${fmtTime(r.t)}</td><td>${Number(r[valueKey]).toFixed(2)}</td>`;
                tb.appendChild(tr);
            });
        }

        // Tabloları güncelleme fonksiyonu
        function updateTable(tbodyId, value, time, valueKey) {
            const tb = document.getElementById(tbodyId);
            // Yeni satır ekle
            const tr = document.createElement('tr');
            tr.innerHTML = `<td>${time}</td><td>${value}</td>`;
            // En üste ekle
            if (tb.firstChild) {
                tb.insertBefore(tr, tb.firstChild);
            } else {
                tb.appendChild(tr);
            }
            // Maksimum 12 satır tut
            while (tb.children.length > 12) {
                tb.removeChild(tb.lastChild);
            }
        }
    </script>
}
