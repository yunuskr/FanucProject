@model FanucRelease.ViewModels.RaporlarIndexVM
@{
    ViewData["Title"] = "Raporlar";
}

@section Head {
    <link rel="stylesheet" href="~/css/performance.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/raporlar.css" asp-append-version="true" />
    <script src="~/libs/chart.js/Chart.min.js"></script>
}

<div class="container-fluid">
    <!-- Header (filters removed) -->
    <div class="row align-items-center mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center">
                <div class="stat-icon primary me-3" style="width: 60px; height: 60px; font-size: 1.5rem;">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div>
                    <h2 class="mb-0 text-white" style="text-shadow: 0 2px 8px rgba(0,0,0,.25)">
                        Raporlar
                    </h2>
                    <p class="mb-0 text-white-50 small">Performans analizi ve KPI takibi</p>
                </div>
            </div>
        </div>
    </div>
    

    <!-- Content Rows -->
    <div class="row g-4 align-items-stretch">
        <!-- Karşılaştırma (Program/Kaynak/Hata) moved to top -->
        <div class="col-12">
            <div class="gold-card p-4 equal-height-card panel-fixed panel-tall">
                <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon info me-3">
                            <i class="fas fa-balance-scale"></i>
                        </div>
                        <div class="section-card-title mb-0">Karşılaştırma (Program/Kaynak/Hata)</div>
                    </div>
                    <form method="get" class="d-flex align-items-end flex-wrap gap-2">
                        <div class="me-2">
                            <label class="small text-muted">Zaman Aralığı</label>
                            <select name="compareMode" id="compareMode" class="form-select form-select-sm">
                                @if (Model.CompareMode == "daily")
                                {
                                    <option value="daily" selected>Günlük</option>
                                }
                                else
                                {
                                    <option value="daily">Günlük</option>
                                }
                                @if (Model.CompareMode == "weekly")
                                {
                                    <option value="weekly" selected>Haftalık (Pzt-Cmt)</option>
                                }
                                else
                                {
                                    <option value="weekly">Haftalık (Pzt-Cmt)</option>
                                }
                                @if (Model.CompareMode == "monthly")
                                {
                                    <option value="monthly" selected>Aylık</option>
                                }
                                else
                                {
                                    <option value="monthly">Aylık</option>
                                }
                                @if (Model.CompareMode == "yearly")
                                {
                                    <option value="yearly" selected>Yıllık</option>
                                }
                                else
                                {
                                    <option value="yearly">Yıllık</option>
                                }
                            </select>
                        </div>
                        @{
                            var years = new[] { DateTime.Today.Year - 1, DateTime.Today.Year, DateTime.Today.Year + 1 };
                            var monthNames = System.Globalization.CultureInfo.GetCultureInfo("tr-TR").DateTimeFormat.MonthNames;
                        }

                        <!-- Weekly selectors (A) -->
                        <div class="d-flex align-items-end gap-2 weekly-only">
                            <div>
                                <label class="small text-muted">Dönem A - Yıl</label>
                                <select name="AYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.AYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Ay</label>
                                <select name="AMonth" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        var name = monthNames[i - 1];
                                        if (string.IsNullOrEmpty(name)) { name = i.ToString(); }
                                        if (Model.AMonth == i) { <option value="@i" selected>@name</option>; } else { <option value="@i">@name</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Hafta</label>
                                <select name="AWeek" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (Model.AWeek == i) { <option value="@i" selected>@i</option>; } else { <option value="@i">@i</option>; }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Weekly selectors (B) -->
                        <div class="d-flex align-items-end gap-2 weekly-only">
                            <div>
                                <label class="small text-muted">Dönem B - Yıl</label>
                                <select name="BYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.BYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Ay</label>
                                <select name="BMonth" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        var name = monthNames[i - 1];
                                        if (string.IsNullOrEmpty(name)) { name = i.ToString(); }
        
                                        if (Model.BMonth == i) { <option value="@i" selected>@name</option>; } else { <option value="@i">@name</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Hafta</label>
                                <select name="BWeek" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 4; i++)
                                    {
                                        if (Model.BWeek == i) { <option value="@i" selected>@i</option>; } else { <option value="@i">@i</option>; }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Monthly selectors (A) -->
                        <div class="d-flex align-items-end gap-2 monthly-only">
                            <div>
                                <label class="small text-muted">Dönem A - Yıl</label>
                                <select name="AYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.AYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Ay</label>
                                <select name="AMonth" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        var name = monthNames[i - 1];
                                        if (string.IsNullOrEmpty(name)) { name = i.ToString(); }
                                        if (Model.AMonth == i) { <option value="@i" selected>@name</option>; } else { <option value="@i">@name</option>; }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Monthly selectors (B) -->
                        <div class="d-flex align-items-end gap-2 monthly-only">
                            <div>
                                <label class="small text-muted">Dönem B - Yıl</label>
                                <select name="BYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.BYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Ay</label>
                                <select name="BMonth" class="form-select form-select-sm">
                                    @for (int i = 1; i <= 12; i++)
                                    {
                                        var name = monthNames[i - 1];
                                        if (string.IsNullOrEmpty(name)) { name = i.ToString(); }
                                        if (Model.BMonth == i) { <option value="@i" selected>@name</option>; } else { <option value="@i">@name</option>; }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Yearly selectors (A & B) -->
                        <div class="d-flex align-items-end gap-2 yearly-only">
                            <div>
                                <label class="small text-muted">Dönem A - Yıl</label>
                                <select name="AYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.AYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                            <div>
                                <label class="small text-muted">Dönem B - Yıl</label>
                                <select name="BYear" class="form-select form-select-sm">
                                    @foreach (var y in years)
                                    {
                                        if (Model.BYear == y) { <option value="@y" selected>@y</option>; } else { <option value="@y">@y</option>; }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Daily date pickers (A & B) -->
                        <div class="d-flex align-items-end gap-2 daily-only">
                            <div>
                                <label class="small text-muted">Dönem A</label>
                                <input type="date" name="compareABase" class="form-control form-control-sm" value="@Model.CompareABase?.ToString("yyyy-MM-dd")" />
                            </div>
                            <div>
                                <label class="small text-muted">Dönem B</label>
                                <input type="date" name="compareBBase" class="form-control form-control-sm" value="@Model.CompareBBase?.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                        @if (Model.StartDate.HasValue)
                        {
                            <input type="hidden" name="startDate" value="@Model.StartDate.Value.ToString("yyyy-MM-dd")" />
                        }
                        @if (Model.EndDate.HasValue)
                        {
                            <input type="hidden" name="endDate" value="@Model.EndDate.Value.ToString("yyyy-MM-dd")" />
                        }
                        @if (Model.OperatorId.HasValue)
                        {
                            <input type="hidden" name="operatorId" value="@Model.OperatorId" />
                        }
                        <button class="btn btn-primary btn-sm"><i class="fas fa-sync-alt me-1"></i> Karşılaştır</button>
                    </form>
                </div>
                <div id="compare-container">
                    <div class="row g-3">
                    <div class="col-md-4">
                        <div class="gold-card p-3 h-100">
                            <div class="small text-muted mb-1">Dönem A</div>
                            <div class="fw-semibold">@Model.CompareA.Label</div>
                            <div class="d-flex justify-content-between mt-2">
                                <div><i class="fas fa-file-code me-1 text-primary"></i> @Model.CompareA.Program Program</div>
                                <div><i class="fas fa-bolt me-1 text-success"></i> @Model.CompareA.Kaynak Kaynak</div>
                                <div><i class="fas fa-exclamation-circle me-1 text-danger"></i> @Model.CompareA.Hata Hata</div>
                            </div>
                            <div class="mt-2 small text-muted"><i class="fas fa-clock me-1"></i> Toplam Süre: @((Model.CompareA.SureDakika/60) > 0 ? ($"{Model.CompareA.SureDakika/60} sa {Model.CompareA.SureDakika%60} dk") : ($"{Model.CompareA.SureDakika} dk"))</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="gold-card p-3 h-100">
                            <div class="small text-muted mb-1">Dönem B</div>
                            <div class="fw-semibold">@Model.CompareB.Label</div>
                            <div class="d-flex justify-content-between mt-2">
                                <div><i class="fas fa-file-code me-1 text-primary"></i> @Model.CompareB.Program Program</div>
                                <div><i class="fas fa-bolt me-1 text-success"></i> @Model.CompareB.Kaynak Kaynak</div>
                                <div><i class="fas fa-exclamation-circle me-1 text-danger"></i> @Model.CompareB.Hata Hata</div>
                            </div>
                            <div class="mt-2 small text-muted"><i class="fas fa-clock me-1"></i> Toplam Süre: @((Model.CompareB.SureDakika/60) > 0 ? ($"{Model.CompareB.SureDakika/60} sa {Model.CompareB.SureDakika%60} dk") : ($"{Model.CompareB.SureDakika} dk"))</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="gold-card p-3 h-100">
                            <div class="small text-muted mb-1">Fark</div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <div class="small">Program</div>
                                    <div class="fw-bold @(Model.CompareDelta.Program >= 0 ? "text-success" : "text-danger")">
                                        <i class="fas @(Model.CompareDelta.Program >= 0 ? "fa-arrow-up" : "fa-arrow-down") me-1"></i>@Math.Abs(Model.CompareDelta.Program)
                                    </div>
                                </div>
                                <div>
                                    <div class="small">Kaynak</div>
                                    <div class="fw-bold @(Model.CompareDelta.Kaynak >= 0 ? "text-success" : "text-danger")">
                                        <i class="fas @(Model.CompareDelta.Kaynak >= 0 ? "fa-arrow-up" : "fa-arrow-down") me-1"></i>@Math.Abs(Model.CompareDelta.Kaynak)
                                    </div>
                                </div>
                                <div>
                                    <div class="small">Hata</div>
                                    <div class="fw-bold @(Model.CompareDelta.Hata <= 0 ? "text-success" : "text-danger")">
                                        <i class="fas @(Model.CompareDelta.Hata <= 0 ? "fa-arrow-down" : "fa-arrow-up") me-1"></i>@Math.Abs(Model.CompareDelta.Hata)
                                    </div>
                                </div>
                            </div>
                            <div class="mt-2">
                                <div class="small">Süre</div>
                                <div class="fw-bold @(Model.CompareDelta.SureDakika >= 0 ? "text-success" : "text-danger")">
                                    <i class="fas @(Model.CompareDelta.SureDakika >= 0 ? "fa-arrow-up" : "fa-arrow-down") me-1"></i>
                                    @{
                                        var dd = Math.Abs(Model.CompareDelta.SureDakika);
                                        if ((dd/60) > 0) {<text>@(dd/60) sa @(dd%60) dk</text>} else {<text>@dd dk</text>}
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                    <div class="mt-3">
                        <canvas id="compareVsChart" height="260"></canvas>
                    </div>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', function () {
                        // Toggle weekly vs non-weekly inputs
                        function setGroupVisibility(selector, on) {
                            document.querySelectorAll(selector).forEach(function (group) {
                                group.style.display = on ? (group.classList.contains('d-flex') ? 'flex' : 'block') : 'none';
                                // enable/disable inputs under this group to control form submission
                                group.querySelectorAll('input, select, textarea').forEach(function (inp) {
                                    if (on) {
                                        inp.removeAttribute('disabled');
                                    } else {
                                        inp.setAttribute('disabled', 'disabled');
                                    }
                                });
                            });
                        }
                        function toggleInputs() {
                            var mode = document.getElementById('compareMode').value;
                            setGroupVisibility('.weekly-only', mode === 'weekly');
                            setGroupVisibility('.monthly-only', mode === 'monthly');
                            setGroupVisibility('.yearly-only', mode === 'yearly');
                            setGroupVisibility('.daily-only', mode === 'daily');
                        }
                        document.getElementById('compareMode').addEventListener('change', toggleInputs);
                        toggleInputs();

                        var ctxVs = document.getElementById('compareVsChart');
                        if (!ctxVs || !window.Chart) return;
                        var labels = ['Program', 'Kaynak', 'Hata', 'Süre (dk)'];
                        var a = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(new[] { Model.CompareA.Program, Model.CompareA.Kaynak, Model.CompareA.Hata, Model.CompareA.SureDakika }));
                        var b = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(new[] { Model.CompareB.Program, Model.CompareB.Kaynak, Model.CompareB.Hata, Model.CompareB.SureDakika }));
                        var aNeg = a.map(function (v) { return -Math.max(0, v); });
                        var maxVal = Math.max.apply(null, a.concat(b));
                        var pad = Math.max(1, Math.ceil(maxVal * 0.15));
                        var bound = maxVal + pad;
                        new Chart(ctxVs.getContext('2d'), {
                            type: 'horizontalBar',
                            data: {
                                labels: labels,
                                datasets: [
                                    {
                                        label: 'Dönem A (@Model.CompareA.Label)',
                                        data: aNeg,
                                        backgroundColor: 'rgba(255, 99, 132, 0.6)',
                                        borderColor: 'rgba(255, 99, 132, 1)',
                                        borderWidth: 1,
                                        stack: 'vs'
                                    },
                                    {
                                        label: 'Dönem B (@Model.CompareB.Label)',
                                        data: b,
                                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                                        borderColor: 'rgba(75, 192, 192, 1)',
                                        borderWidth: 1,
                                        stack: 'vs'
                                    }
                                ]
                            },
                            options: {
                                maintainAspectRatio: false,
                                responsive: true,
                                legend: { display: true },
                                scales: {
                                    xAxes: [{
                                        stacked: true,
                                        ticks: {
                                            min: -bound,
                                            max: bound,
                                            callback: function (value) { return Math.abs(value); }
                                        },
                                        gridLines: {
                                            zeroLineColor: 'rgba(0,0,0,0.6)',
                                            zeroLineWidth: 2
                                        }
                                    }],
                                    yAxes: [{ stacked: true }]
                                },
                                tooltips: {
                                    callbacks: {
                                        label: function (tooltipItem, data) {
                                            var ds = data.datasets[tooltipItem.datasetIndex];
                                            var raw = tooltipItem.xLabel || tooltipItem.xValue || 0;
                                            var val = Math.abs(raw);
                                            var label = data.labels[tooltipItem.index] || '';
                                            if (label && label.toString().toLowerCase().indexOf('süre') !== -1) {
                                                var h = Math.floor(val / 60);
                                                var m = val % 60;
                                                var timeText = h > 0 ? (h + ' sa ' + m + ' dk') : (m + ' dk');
                                                return ds.label + ': ' + timeText;
                                            }
                                            return ds.label + ': ' + val;
                                        }
                                    }
                                }
                            }
                        });
                    });
                </script>
            </div>
        </div>
        
        <!-- Top Operators -->
        <div class="col-lg-6 equal-height-col">
            <div class="gold-card p-4 equal-height-card panel-fixed">
                <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon primary me-3">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="section-card-title mb-0">En İyi Operatörler</div>
                    </div>
                    <form id="form-op" method="get" class="d-flex align-items-end gap-2" data-target="#op-container" data-url="@Url.Action("TopOperatorsPartial","Raporlar")">
                        <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        @if (Model.OperatorId.HasValue) { <input type="hidden" name="operatorId" value="@Model.OperatorId" /> }
                        <div>
                            <label class="small text-muted">Başlangıç</label>
                            <input type="date" name="opStart" class="form-control form-control-sm" value="@Model.OpStartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div>
                            <label class="small text-muted">Bitiş</label>
                            <input type="date" name="opEnd" class="form-control form-control-sm" value="@Model.OpEndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="chart-toolbar d-flex align-items-center gap-2">
                        <label class="small text-muted">Sırala</label>
                        <select id="opSortBy" class="form-select form-select-sm w-auto">
                            <option value="program" selected>Programa göre</option>
                            <option value="kaynak">Kaynağa göre</option>
                            <option value="basari">Başarıya göre</option>
                        </select>
                        </div>
                        <button class="btn btn-outline-primary btn-sm">Uygula</button>
                    </form>
                </div>
                <div id="op-container">
                    @await Html.PartialAsync("_TopOperators", Model.TopOperatorlar)
                </div>
            </div>
        </div>

        <!-- Top Programs -->
        <div class="col-lg-6 equal-height-col">
            <div class="gold-card p-4 equal-height-card panel-fixed">
                <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
                    <div class="stat-icon warning me-3">
                        <i class="fas fa-trophy"></i>
                    </div>
                    <div class="section-card-title mb-0">En Yoğun Programlar</div>
                    <form id="form-prog" method="get" class="d-flex align-items-end gap-2" data-target="#prog-container" data-url="@Url.Action("TopProgramsPartial","Raporlar")">
                        <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        @if (Model.OperatorId.HasValue) { <input type="hidden" name="operatorId" value="@Model.OperatorId" /> }
                        <div>
                            <label class="small text-muted">Başlangıç</label>
                            <input type="date" name="progStart" class="form-control form-control-sm" value="@Model.ProgStartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div>
                            <label class="small text-muted">Bitiş</label>
                            <input type="date" name="progEnd" class="form-control form-control-sm" value="@Model.ProgEndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <button class="btn btn-outline-primary btn-sm">Uygula</button>
                    </form>
                </div>
                <div id="prog-container">
                    @await Html.PartialAsync("_TopPrograms", Model.TopProgramlar)
                </div>
            </div>
        </div>

        <!-- Error Trend Chart -->
        <div class="col-12">
            <div class="gold-card p-4">
                <div class="d-flex align-items-center justify-content-between mb-4 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon danger me-3">
                            <i class="fas fa-chart-bar"></i>
                        </div>
                        <div class="section-card-title mb-0">Hata Trendi Grafiği</div>
                    </div>
                    <form id="form-hata" method="get" class="d-flex align-items-end gap-2" data-target="#hata-container" data-url="@Url.Action("HataTrendPartial","Raporlar")">
                        <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        @if (Model.OperatorId.HasValue) { <input type="hidden" name="operatorId" value="@Model.OperatorId" /> }
                        <div>
                            <label class="small text-muted">Başlangıç</label>
                            <input type="date" name="errorStart" class="form-control form-control-sm" value="@Model.ErrorStartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div>
                            <label class="small text-muted">Bitiş</label>
                            <input type="date" name="errorEnd" class="form-control form-control-sm" value="@Model.ErrorEndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <button class="btn btn-outline-primary btn-sm">Uygula</button>
                    </form>
                </div>
                <div id="hata-container">
                    @await Html.PartialAsync("_HataTrend", Model.HataTrend)
                </div>
            </div>
        </div>

        <!-- Longest Programs (Horizontal Duration Chart) -->
        <div class="col-12">
            <div class="gold-card p-4">
                <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon warning me-3">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="section-card-title mb-0">En Uzun Süren Programlar</div>
                    </div>
                    <form id="form-longest" method="get" class="d-flex align-items-end gap-2" data-target="#longest-container" data-url="@Url.Action("LongestProgramsPartial","Raporlar")">
                        <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        @if (Model.OperatorId.HasValue) { <input type="hidden" name="operatorId" value="@Model.OperatorId" /> }
                        <div>
                            <label class="small text-muted">Başlangıç</label>
                            <input type="date" name="durStart" class="form-control form-control-sm" value="@Model.DurStartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div>
                            <label class="small text-muted">Bitiş</label>
                            <input type="date" name="durEnd" class="form-control form-control-sm" value="@Model.DurEndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <button class="btn btn-outline-primary btn-sm">Uygula</button>
                    </form>
                </div>
                <div id="longest-container">
                    @await Html.PartialAsync("_LongestPrograms", Model.UzunSurenProgramlar)
                </div>
            </div>
        </div>


        <!-- Daily Trend -->
        <div class="col-lg-8">
            <div class="gold-card p-4 equal-height-card panel-fixed">
                <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
                    <div class="d-flex align-items-center">
                        <div class="stat-icon info me-3">
                            <i class="fas fa-chart-area"></i>
                        </div>
                        <div class="section-card-title mb-0">Günlük Performans Trendi</div>
                    </div>
                    <form id="form-trend" method="get" class="d-flex align-items-end gap-2" data-target="#trend-container" data-url="@Url.Action("DailyTrendPartial","Raporlar")">
                        <input type="hidden" name="startDate" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        <input type="hidden" name="endDate" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        @if (Model.OperatorId.HasValue) { <input type="hidden" name="operatorId" value="@Model.OperatorId" /> }
                        <div>
                            <label class="small text-muted">Başlangıç</label>
                            <input type="date" name="trendStart" class="form-control form-control-sm" value="@Model.TrendStartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div>
                            <label class="small text-muted">Bitiş</label>
                            <input type="date" name="trendEnd" class="form-control form-control-sm" value="@Model.TrendEndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <button class="btn btn-outline-primary btn-sm">Uygula</button>
                    </form>
                </div>
                <div id="trend-container">
                    @await Html.PartialAsync("_DailyTrend", Model.GunlukTrend)
                </div>
            </div>
        </div>

        <!-- Top Errors -->
        <div class="col-lg-4">
            <div class="gold-card p-4">
                <div class="d-flex align-items-center mb-3">
                    <div class="stat-icon danger me-3">
                        <i class="fas fa-exclamation-circle"></i>
                    </div>
                    <div class="section-card-title mb-0">En Sık Hatalar</div>
                </div>
                @if (!Model.TopHatalar.Any())
                {
                    <div class="alert alert-success border-0">
                        <i class="fas fa-check-circle me-2"></i>
                        <strong>Harika!</strong> Bu dönemde hata kaydı bulunmuyor.
                    </div>
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var h in Model.TopHatalar.Take(8))
                        {
                            <div class="list-group-item border-0 px-0 py-3">
                                <div class="d-flex align-items-start">
                                    <div class="stat-icon danger me-3" style="width: 35px; height: 35px; font-size: 0.9rem;">
                                        <i class="fas fa-bug"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center justify-content-between mb-1">
                                            <div class="fw-semibold text-dark">@h.Kod</div>
                                            <span class="badge bg-danger rounded-pill">@h.Adet</span>
                                        </div>
                                        <div class="small text-muted">@h.Aciklama</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<script>
    // Page hover effects and tooltip initialization
    document.addEventListener('DOMContentLoaded', function () {
        // Add tooltips to filter buttons
        const tooltips = document.querySelectorAll('[title]');
        tooltips.forEach(element => {
            element.setAttribute('data-bs-toggle', 'tooltip');
        });

        // Initialize Bootstrap tooltips if available
        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        function showLoading(target) {
            const el = document.querySelector(target);
            if (!el) return;
            el.innerHTML = '<div class="text-center py-4 text-muted"><span class="spinner-border spinner-border-sm me-2"></span>Yükleniyor…</div>';
        }

        function initOpSort(container) {
            const list = container.querySelector('#op-list');
            const sortSelect = document.getElementById('opSortBy');
            if (!list || !sortSelect) return;
            function sortOperators() {
                const metric = sortSelect.value; // program | kaynak | basari
                const items = Array.from(list.querySelectorAll('.list-group-item'));
                items.sort((a, b) => parseFloat(b.dataset[metric] || 0) - parseFloat(a.dataset[metric] || 0));
                items.forEach(el => list.appendChild(el));
            }
            sortSelect.removeEventListener('change', sortOperators);
            sortSelect.addEventListener('change', sortOperators);
            sortOperators();
        }

        function initLongestChart(container) {
            const canvas = container.querySelector('#longestProgramsChart');
            if (!canvas || !window.Chart) return;
            const labels = JSON.parse(canvas.dataset.labels || '[]');
            const dataValues = JSON.parse(canvas.dataset.values || '[]');
            new Chart(canvas.getContext('2d'), {
                type: 'horizontalBar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Süre (dk)',
                        data: dataValues,
                        backgroundColor: 'rgba(255, 193, 7, 0.6)',
                        borderColor: 'rgba(255, 193, 7, 1)',
                        borderWidth: 1,
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive: true,
                    legend: { display: false },
                    scales: {
                        xAxes: [{
                            ticks: { callback: function (value) { return value + ' dk'; } },
                            gridLines: { color: 'rgba(0,0,0,0.05)' }
                        }],
                        yAxes: [{
                            barPercentage: 0.7,
                            categoryPercentage: 0.7,
                            gridLines: { display: false }
                        }]
                    },
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem) {
                                var minutes = tooltipItem.xLabel || 0;
                                var h = Math.floor(minutes / 60);
                                var m = minutes % 60;
                                var timeText = h > 0 ? (h + ' sa ' + m + ' dk') : (m + ' dk');
                                return 'Süre: ' + timeText;
                            }
                        }
                    }
                }
            });
        }

        async function handlePartialForm(e) {
            e.preventDefault();
            const form = e.currentTarget;
            const url = form.getAttribute('data-url');
            const target = form.getAttribute('data-target');
            if (!url || !target) return;
            showLoading(target);
            const params = new URLSearchParams(new FormData(form));
            try {
                const resp = await fetch(url + '?' + params.toString(), { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                if (!resp.ok) throw new Error('HTTP ' + resp.status);
                const html = await resp.text();
                const container = document.querySelector(target);
                if (container) {
                    container.innerHTML = html;
                    if (target === '#op-container') initOpSort(container);
                    if (target === '#longest-container') initLongestChart(container);
                }
            } catch (err) {
                const container = document.querySelector(target);
                if (container) {
                    container.innerHTML = '<div class="alert alert-danger">Yükleme hatası: ' + (err.message || err) + '</div>';
                }
            }
        }

    const forms = ['#form-op', '#form-prog', '#form-hata', '#form-longest', '#form-trend'];
        forms.forEach(sel => {
            const f = document.querySelector(sel);
            if (f) f.addEventListener('submit', handlePartialForm);
        });

        // Initialize dynamic content on first load
        const opContainer = document.querySelector('#op-container');
        if (opContainer) initOpSort(opContainer);
        const longestContainer = document.querySelector('#longest-container');
        if (longestContainer) initLongestChart(longestContainer);
    });
</script>